
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.pantheon.codegen.table ;

namespace alby.pantheon.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠VacantPossessionDetail( bool insert, t.VacantPossessionDetail newobj, t.VacantPossessionDetail oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[21/40] VacantPossessionDetail - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.VacantPossessionDetailID, "VacantPossessionDetail.VacantPossessionDetailID" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionTenantApplicable, "VacantPossessionDetail.VacantPossessionTenantApplicable" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionTenantShopNo, "VacantPossessionDetail.VacantPossessionTenantShopNo" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionTenantDate, "VacantPossessionDetail.VacantPossessionTenantDate" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionLesseeApplicable, "VacantPossessionDetail.VacantPossessionLesseeApplicable" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionLesseeShopNo, "VacantPossessionDetail.VacantPossessionLesseeShopNo" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionLesseeDate, "VacantPossessionDetail.VacantPossessionLesseeDate" ) ;
			nu.Assert.IsNotNull( newobj.UpdateUserCode, "VacantPossessionDetail.UpdateUserCode" ) ;
			nu.Assert.IsNotNull( newobj.UpdateDateTime, "VacantPossessionDetail.UpdateDateTime" ) ;
			nu.Assert.IsNotNull( newobj.RowTimestamp, "VacantPossessionDetail.RowTimestamp" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionTenantTradingName, "VacantPossessionDetail.VacantPossessionTenantTradingName" ) ;
			nu.Assert.IsNotNull( newobj.VacantPossessionLesseeTradingName, "VacantPossessionDetail.VacantPossessionLesseeTradingName" ) ;
		 
			base.AssertAreEqual( newobj.VacantPossessionDetailID, oldobj.VacantPossessionDetailID, "VacantPossessionDetail.VacantPossessionDetailID" ) ;
			base.AssertAreEqual( newobj.VacantPossessionTenantApplicable, oldobj.VacantPossessionTenantApplicable, "VacantPossessionDetail.VacantPossessionTenantApplicable" ) ;
			base.AssertAreEqual( newobj.VacantPossessionTenantShopNo, oldobj.VacantPossessionTenantShopNo, "VacantPossessionDetail.VacantPossessionTenantShopNo" ) ;
			base.AssertAreEqual( newobj.VacantPossessionTenantDate, oldobj.VacantPossessionTenantDate, "VacantPossessionDetail.VacantPossessionTenantDate" ) ;
			base.AssertAreEqual( newobj.VacantPossessionLesseeApplicable, oldobj.VacantPossessionLesseeApplicable, "VacantPossessionDetail.VacantPossessionLesseeApplicable" ) ;
			base.AssertAreEqual( newobj.VacantPossessionLesseeShopNo, oldobj.VacantPossessionLesseeShopNo, "VacantPossessionDetail.VacantPossessionLesseeShopNo" ) ;
			base.AssertAreEqual( newobj.VacantPossessionLesseeDate, oldobj.VacantPossessionLesseeDate, "VacantPossessionDetail.VacantPossessionLesseeDate" ) ;
			base.AssertAreEqual( newobj.UpdateUserCode, oldobj.UpdateUserCode, "VacantPossessionDetail.UpdateUserCode" ) ;
			base.AssertAreEqual( newobj.UpdateDateTime, oldobj.UpdateDateTime, "VacantPossessionDetail.UpdateDateTime" ) ;
			base.AssertAreEqual( newobj.VacantPossessionTenantTradingName, oldobj.VacantPossessionTenantTradingName, "VacantPossessionDetail.VacantPossessionTenantTradingName" ) ;
			base.AssertAreEqual( newobj.VacantPossessionLesseeTradingName, oldobj.VacantPossessionLesseeTradingName, "VacantPossessionDetail.VacantPossessionLesseeTradingName" ) ;
		 
		}
	}

}

