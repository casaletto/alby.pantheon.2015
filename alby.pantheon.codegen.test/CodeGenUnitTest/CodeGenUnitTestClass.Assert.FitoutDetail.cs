
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.pantheon.codegen.table ;

namespace alby.pantheon.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠FitoutDetail( bool insert, t.FitoutDetail newobj, t.FitoutDetail oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[6/40] FitoutDetail - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.FitoutDetailID, "FitoutDetail.FitoutDetailID" ) ;
			nu.Assert.IsNotNull( newobj.FitoutContribution, "FitoutDetail.FitoutContribution" ) ;
			nu.Assert.IsNotNull( newobj.FitoutPeriod, "FitoutDetail.FitoutPeriod" ) ;
			nu.Assert.IsNotNull( newobj.IncentiveBudget, "FitoutDetail.IncentiveBudget" ) ;
			nu.Assert.IsNotNull( newobj.HandoverDate, "FitoutDetail.HandoverDate" ) ;
			nu.Assert.IsNotNull( newobj.ArchitectFeesPayableIndicator, "FitoutDetail.ArchitectFeesPayableIndicator" ) ;
			nu.Assert.IsNotNull( newobj.ArchitectFees, "FitoutDetail.ArchitectFees" ) ;
			nu.Assert.IsNotNull( newobj.EngineerFeesPayableIndicator, "FitoutDetail.EngineerFeesPayableIndicator" ) ;
			nu.Assert.IsNotNull( newobj.EngineerFees, "FitoutDetail.EngineerFees" ) ;
			nu.Assert.IsNotNull( newobj.SmallShopDesignerFeesPayableIndicator, "FitoutDetail.SmallShopDesignerFeesPayableIndicator" ) ;
			nu.Assert.IsNotNull( newobj.SmallShopDesignerFees, "FitoutDetail.SmallShopDesignerFees" ) ;
			nu.Assert.IsNotNull( newobj.SurveyFeePayableIndicator, "FitoutDetail.SurveyFeePayableIndicator" ) ;
			nu.Assert.IsNotNull( newobj.SurveyFees, "FitoutDetail.SurveyFees" ) ;
			nu.Assert.IsNotNull( newobj.TenantCoordinationFeesPayable, "FitoutDetail.TenantCoordinationFeesPayable" ) ;
			nu.Assert.IsNotNull( newobj.TenantCoordinationFees, "FitoutDetail.TenantCoordinationFees" ) ;
			nu.Assert.IsNotNull( newobj.AgreementToLeaseIndicator, "FitoutDetail.AgreementToLeaseIndicator" ) ;
			nu.Assert.IsNotNull( newobj.DevelopmentApprovalsRequiredIndicator, "FitoutDetail.DevelopmentApprovalsRequiredIndicator" ) ;
			nu.Assert.IsNotNull( newobj.DevelopmentApprovalsDueDate, "FitoutDetail.DevelopmentApprovalsDueDate" ) ;
			nu.Assert.IsNotNull( newobj.ConceptPlanSubmitDate, "FitoutDetail.ConceptPlanSubmitDate" ) ;
			nu.Assert.IsNotNull( newobj.FullWorkingDrawingsSubmitDate, "FitoutDetail.FullWorkingDrawingsSubmitDate" ) ;
			nu.Assert.IsNotNull( newobj.PracticalCompletionDateLessor, "FitoutDetail.PracticalCompletionDateLessor" ) ;
			nu.Assert.IsNotNull( newobj.EstimatedOpeningDate, "FitoutDetail.EstimatedOpeningDate" ) ;
			nu.Assert.IsNotNull( newobj.RefurbishmentRequiredIndicator, "FitoutDetail.RefurbishmentRequiredIndicator" ) ;
			nu.Assert.IsNotNull( newobj.FitoutPlanSubmitDate, "FitoutDetail.FitoutPlanSubmitDate" ) ;
			nu.Assert.IsNotNull( newobj.PracticalCompletionDateLessee, "FitoutDetail.PracticalCompletionDateLessee" ) ;
			nu.Assert.IsNotNull( newobj.DevelopmentDesignFormSubmitDate, "FitoutDetail.DevelopmentDesignFormSubmitDate" ) ;
			nu.Assert.IsNotNull( newobj.LessorWorksCost, "FitoutDetail.LessorWorksCost" ) ;
			nu.Assert.IsNotNull( newobj.UpdateUserCode, "FitoutDetail.UpdateUserCode" ) ;
			nu.Assert.IsNotNull( newobj.UpdateDateTime, "FitoutDetail.UpdateDateTime" ) ;
			nu.Assert.IsNotNull( newobj.RowTimestamp, "FitoutDetail.RowTimestamp" ) ;
			nu.Assert.IsNotNull( newobj.SmallShopDesignerLessorFee, "FitoutDetail.SmallShopDesignerLessorFee" ) ;
			nu.Assert.IsNotNull( newobj.SmallShopDesignerBillingDate, "FitoutDetail.SmallShopDesignerBillingDate" ) ;
		 
			base.AssertAreEqual( newobj.FitoutDetailID, oldobj.FitoutDetailID, "FitoutDetail.FitoutDetailID" ) ;
			base.AssertAreEqual( newobj.FitoutContribution, oldobj.FitoutContribution, "FitoutDetail.FitoutContribution" ) ;
			base.AssertAreEqual( newobj.FitoutPeriod, oldobj.FitoutPeriod, "FitoutDetail.FitoutPeriod" ) ;
			base.AssertAreEqual( newobj.IncentiveBudget, oldobj.IncentiveBudget, "FitoutDetail.IncentiveBudget" ) ;
			base.AssertAreEqual( newobj.HandoverDate, oldobj.HandoverDate, "FitoutDetail.HandoverDate" ) ;
			base.AssertAreEqual( newobj.ArchitectFeesPayableIndicator, oldobj.ArchitectFeesPayableIndicator, "FitoutDetail.ArchitectFeesPayableIndicator" ) ;
			base.AssertAreEqual( newobj.ArchitectFees, oldobj.ArchitectFees, "FitoutDetail.ArchitectFees" ) ;
			base.AssertAreEqual( newobj.EngineerFeesPayableIndicator, oldobj.EngineerFeesPayableIndicator, "FitoutDetail.EngineerFeesPayableIndicator" ) ;
			base.AssertAreEqual( newobj.EngineerFees, oldobj.EngineerFees, "FitoutDetail.EngineerFees" ) ;
			base.AssertAreEqual( newobj.SmallShopDesignerFeesPayableIndicator, oldobj.SmallShopDesignerFeesPayableIndicator, "FitoutDetail.SmallShopDesignerFeesPayableIndicator" ) ;
			base.AssertAreEqual( newobj.SmallShopDesignerFees, oldobj.SmallShopDesignerFees, "FitoutDetail.SmallShopDesignerFees" ) ;
			base.AssertAreEqual( newobj.SurveyFeePayableIndicator, oldobj.SurveyFeePayableIndicator, "FitoutDetail.SurveyFeePayableIndicator" ) ;
			base.AssertAreEqual( newobj.SurveyFees, oldobj.SurveyFees, "FitoutDetail.SurveyFees" ) ;
			base.AssertAreEqual( newobj.TenantCoordinationFeesPayable, oldobj.TenantCoordinationFeesPayable, "FitoutDetail.TenantCoordinationFeesPayable" ) ;
			base.AssertAreEqual( newobj.TenantCoordinationFees, oldobj.TenantCoordinationFees, "FitoutDetail.TenantCoordinationFees" ) ;
			base.AssertAreEqual( newobj.AgreementToLeaseIndicator, oldobj.AgreementToLeaseIndicator, "FitoutDetail.AgreementToLeaseIndicator" ) ;
			base.AssertAreEqual( newobj.DevelopmentApprovalsRequiredIndicator, oldobj.DevelopmentApprovalsRequiredIndicator, "FitoutDetail.DevelopmentApprovalsRequiredIndicator" ) ;
			base.AssertAreEqual( newobj.DevelopmentApprovalsDueDate, oldobj.DevelopmentApprovalsDueDate, "FitoutDetail.DevelopmentApprovalsDueDate" ) ;
			base.AssertAreEqual( newobj.ConceptPlanSubmitDate, oldobj.ConceptPlanSubmitDate, "FitoutDetail.ConceptPlanSubmitDate" ) ;
			base.AssertAreEqual( newobj.FullWorkingDrawingsSubmitDate, oldobj.FullWorkingDrawingsSubmitDate, "FitoutDetail.FullWorkingDrawingsSubmitDate" ) ;
			base.AssertAreEqual( newobj.PracticalCompletionDateLessor, oldobj.PracticalCompletionDateLessor, "FitoutDetail.PracticalCompletionDateLessor" ) ;
			base.AssertAreEqual( newobj.EstimatedOpeningDate, oldobj.EstimatedOpeningDate, "FitoutDetail.EstimatedOpeningDate" ) ;
			base.AssertAreEqual( newobj.RefurbishmentRequiredIndicator, oldobj.RefurbishmentRequiredIndicator, "FitoutDetail.RefurbishmentRequiredIndicator" ) ;
			base.AssertAreEqual( newobj.FitoutPlanSubmitDate, oldobj.FitoutPlanSubmitDate, "FitoutDetail.FitoutPlanSubmitDate" ) ;
			base.AssertAreEqual( newobj.PracticalCompletionDateLessee, oldobj.PracticalCompletionDateLessee, "FitoutDetail.PracticalCompletionDateLessee" ) ;
			base.AssertAreEqual( newobj.DevelopmentDesignFormSubmitDate, oldobj.DevelopmentDesignFormSubmitDate, "FitoutDetail.DevelopmentDesignFormSubmitDate" ) ;
			base.AssertAreEqual( newobj.LessorWorksCost, oldobj.LessorWorksCost, "FitoutDetail.LessorWorksCost" ) ;
			base.AssertAreEqual( newobj.UpdateUserCode, oldobj.UpdateUserCode, "FitoutDetail.UpdateUserCode" ) ;
			base.AssertAreEqual( newobj.UpdateDateTime, oldobj.UpdateDateTime, "FitoutDetail.UpdateDateTime" ) ;
			base.AssertAreEqual( newobj.SmallShopDesignerLessorFee, oldobj.SmallShopDesignerLessorFee, "FitoutDetail.SmallShopDesignerLessorFee" ) ;
			base.AssertAreEqual( newobj.SmallShopDesignerBillingDate, oldobj.SmallShopDesignerBillingDate, "FitoutDetail.SmallShopDesignerBillingDate" ) ;
		 
		}
	}

}

