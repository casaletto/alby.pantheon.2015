
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.pantheon.codegen.table ;

namespace alby.pantheon.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠ExpenseDetail( bool insert, t.ExpenseDetail newobj, t.ExpenseDetail oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[5/40] ExpenseDetail - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.ExpenseDetailID, "ExpenseDetail.ExpenseDetailID" ) ;
			nu.Assert.IsNotNull( newobj.ExpenseTotal, "ExpenseDetail.ExpenseTotal" ) ;
			nu.Assert.IsNotNull( newobj.ExpensePaymentCommenceDate, "ExpenseDetail.ExpensePaymentCommenceDate" ) ;
			nu.Assert.IsNotNull( newobj.ExpensePaymentCommenceDateText, "ExpenseDetail.ExpensePaymentCommenceDateText" ) ;
			nu.Assert.IsNotNull( newobj.OperatingPercent, "ExpenseDetail.OperatingPercent" ) ;
			nu.Assert.IsNotNull( newobj.OperatingExpense, "ExpenseDetail.OperatingExpense" ) ;
			nu.Assert.IsNotNull( newobj.OperatingSQM, "ExpenseDetail.OperatingSQM" ) ;
			nu.Assert.IsNotNull( newobj.StatutoryPercent, "ExpenseDetail.StatutoryPercent" ) ;
			nu.Assert.IsNotNull( newobj.StatutoryExpense, "ExpenseDetail.StatutoryExpense" ) ;
			nu.Assert.IsNotNull( newobj.StatutorySQM, "ExpenseDetail.StatutorySQM" ) ;
			nu.Assert.IsNotNull( newobj.ACGeneralEnergyPercent, "ExpenseDetail.ACGeneralEnergyPercent" ) ;
			nu.Assert.IsNotNull( newobj.ACGeneralEnergyExpense, "ExpenseDetail.ACGeneralEnergyExpense" ) ;
			nu.Assert.IsNotNull( newobj.ACGeneralEnergySQM, "ExpenseDetail.ACGeneralEnergySQM" ) ;
			nu.Assert.IsNotNull( newobj.ACMaintenanceRepairPercent, "ExpenseDetail.ACMaintenanceRepairPercent" ) ;
			nu.Assert.IsNotNull( newobj.ACMaintenanceRepairExpense, "ExpenseDetail.ACMaintenanceRepairExpense" ) ;
			nu.Assert.IsNotNull( newobj.ACMaintenanceRepairSQM, "ExpenseDetail.ACMaintenanceRepairSQM" ) ;
			nu.Assert.IsNotNull( newobj.UpdateUserCode, "ExpenseDetail.UpdateUserCode" ) ;
			nu.Assert.IsNotNull( newobj.UpdateDateTime, "ExpenseDetail.UpdateDateTime" ) ;
			nu.Assert.IsNotNull( newobj.RowTimestamp, "ExpenseDetail.RowTimestamp" ) ;
		 
			base.AssertAreEqual( newobj.ExpenseDetailID, oldobj.ExpenseDetailID, "ExpenseDetail.ExpenseDetailID" ) ;
			base.AssertAreEqual( newobj.ExpenseTotal, oldobj.ExpenseTotal, "ExpenseDetail.ExpenseTotal" ) ;
			base.AssertAreEqual( newobj.ExpensePaymentCommenceDate, oldobj.ExpensePaymentCommenceDate, "ExpenseDetail.ExpensePaymentCommenceDate" ) ;
			base.AssertAreEqual( newobj.ExpensePaymentCommenceDateText, oldobj.ExpensePaymentCommenceDateText, "ExpenseDetail.ExpensePaymentCommenceDateText" ) ;
			base.AssertAreEqual( newobj.OperatingPercent, oldobj.OperatingPercent, "ExpenseDetail.OperatingPercent" ) ;
			base.AssertAreEqual( newobj.OperatingExpense, oldobj.OperatingExpense, "ExpenseDetail.OperatingExpense" ) ;
			base.AssertAreEqual( newobj.OperatingSQM, oldobj.OperatingSQM, "ExpenseDetail.OperatingSQM" ) ;
			base.AssertAreEqual( newobj.StatutoryPercent, oldobj.StatutoryPercent, "ExpenseDetail.StatutoryPercent" ) ;
			base.AssertAreEqual( newobj.StatutoryExpense, oldobj.StatutoryExpense, "ExpenseDetail.StatutoryExpense" ) ;
			base.AssertAreEqual( newobj.StatutorySQM, oldobj.StatutorySQM, "ExpenseDetail.StatutorySQM" ) ;
			base.AssertAreEqual( newobj.ACGeneralEnergyPercent, oldobj.ACGeneralEnergyPercent, "ExpenseDetail.ACGeneralEnergyPercent" ) ;
			base.AssertAreEqual( newobj.ACGeneralEnergyExpense, oldobj.ACGeneralEnergyExpense, "ExpenseDetail.ACGeneralEnergyExpense" ) ;
			base.AssertAreEqual( newobj.ACGeneralEnergySQM, oldobj.ACGeneralEnergySQM, "ExpenseDetail.ACGeneralEnergySQM" ) ;
			base.AssertAreEqual( newobj.ACMaintenanceRepairPercent, oldobj.ACMaintenanceRepairPercent, "ExpenseDetail.ACMaintenanceRepairPercent" ) ;
			base.AssertAreEqual( newobj.ACMaintenanceRepairExpense, oldobj.ACMaintenanceRepairExpense, "ExpenseDetail.ACMaintenanceRepairExpense" ) ;
			base.AssertAreEqual( newobj.ACMaintenanceRepairSQM, oldobj.ACMaintenanceRepairSQM, "ExpenseDetail.ACMaintenanceRepairSQM" ) ;
			base.AssertAreEqual( newobj.UpdateUserCode, oldobj.UpdateUserCode, "ExpenseDetail.UpdateUserCode" ) ;
			base.AssertAreEqual( newobj.UpdateDateTime, oldobj.UpdateDateTime, "ExpenseDetail.UpdateDateTime" ) ;
		 
		}
	}

}

