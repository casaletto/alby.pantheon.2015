
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;

using nu = NUnit.Framework;
using t = alby.pantheon.codegen.table ;

namespace alby.pantheon.codegen.test
{
	public partial class CodeGenUnitTestClass : acr.CodeGenUnitTestBase
	{
		protected void Assert٠CostCentreOutgoing( bool insert, t.CostCentreOutgoing newobj, t.CostCentreOutgoing oldobj )
		{
			acr.CodeGenEtc.ConsoleMessage( ! this.QuietMode, "[26/40] CostCentreOutgoing - assert" ) ;
		 
			nu.Assert.IsNotNull( newobj.CostCentreOutgoingID, "CostCentreOutgoing.CostCentreOutgoingID" ) ;
			nu.Assert.IsNotNull( newobj.CostCentreStageID, "CostCentreOutgoing.CostCentreStageID" ) ;
			nu.Assert.IsNotNull( newobj.OperatingGLA, "CostCentreOutgoing.OperatingGLA" ) ;
			nu.Assert.IsNotNull( newobj.OperatingAmount, "CostCentreOutgoing.OperatingAmount" ) ;
			nu.Assert.IsNotNull( newobj.StatutoryGLA, "CostCentreOutgoing.StatutoryGLA" ) ;
			nu.Assert.IsNotNull( newobj.StatutoryAmount, "CostCentreOutgoing.StatutoryAmount" ) ;
			nu.Assert.IsNotNull( newobj.ACGeneralEnergyGLA, "CostCentreOutgoing.ACGeneralEnergyGLA" ) ;
			nu.Assert.IsNotNull( newobj.ACGeneralEnergyAmount, "CostCentreOutgoing.ACGeneralEnergyAmount" ) ;
			nu.Assert.IsNotNull( newobj.ACMaintenanceRepairGLA, "CostCentreOutgoing.ACMaintenanceRepairGLA" ) ;
			nu.Assert.IsNotNull( newobj.ACMaintenanceRepairAmount, "CostCentreOutgoing.ACMaintenanceRepairAmount" ) ;
			nu.Assert.IsNotNull( newobj.UpdateUserCode, "CostCentreOutgoing.UpdateUserCode" ) ;
			nu.Assert.IsNotNull( newobj.UpdateDateTime, "CostCentreOutgoing.UpdateDateTime" ) ;
			nu.Assert.IsNotNull( newobj.RowTimestamp, "CostCentreOutgoing.RowTimestamp" ) ;
		 
			base.AssertAreEqual( newobj.CostCentreOutgoingID, oldobj.CostCentreOutgoingID, "CostCentreOutgoing.CostCentreOutgoingID" ) ;
			base.AssertAreEqual( newobj.CostCentreStageID, oldobj.CostCentreStageID, "CostCentreOutgoing.CostCentreStageID" ) ;
			base.AssertAreEqual( newobj.OperatingGLA, oldobj.OperatingGLA, "CostCentreOutgoing.OperatingGLA" ) ;
			base.AssertAreEqual( newobj.OperatingAmount, oldobj.OperatingAmount, "CostCentreOutgoing.OperatingAmount" ) ;
			base.AssertAreEqual( newobj.StatutoryGLA, oldobj.StatutoryGLA, "CostCentreOutgoing.StatutoryGLA" ) ;
			base.AssertAreEqual( newobj.StatutoryAmount, oldobj.StatutoryAmount, "CostCentreOutgoing.StatutoryAmount" ) ;
			base.AssertAreEqual( newobj.ACGeneralEnergyGLA, oldobj.ACGeneralEnergyGLA, "CostCentreOutgoing.ACGeneralEnergyGLA" ) ;
			base.AssertAreEqual( newobj.ACGeneralEnergyAmount, oldobj.ACGeneralEnergyAmount, "CostCentreOutgoing.ACGeneralEnergyAmount" ) ;
			base.AssertAreEqual( newobj.ACMaintenanceRepairGLA, oldobj.ACMaintenanceRepairGLA, "CostCentreOutgoing.ACMaintenanceRepairGLA" ) ;
			base.AssertAreEqual( newobj.ACMaintenanceRepairAmount, oldobj.ACMaintenanceRepairAmount, "CostCentreOutgoing.ACMaintenanceRepairAmount" ) ;
			base.AssertAreEqual( newobj.UpdateUserCode, oldobj.UpdateUserCode, "CostCentreOutgoing.UpdateUserCode" ) ;
			base.AssertAreEqual( newobj.UpdateDateTime, oldobj.UpdateDateTime, "CostCentreOutgoing.UpdateDateTime" ) ;
		 
		}
	}

}

