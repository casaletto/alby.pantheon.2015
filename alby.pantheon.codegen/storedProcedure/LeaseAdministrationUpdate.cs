
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.pantheon.codegen;

namespace alby.pantheon.codegen.storedProcedure
{
	public partial class StoredProcedureFactory : acr.StoredProcedureFactoryBase< ns.database.pantheonDatabaseSingletonHelper, ns.database.pantheonDatabase >
	{
		public int LeaseAdministrationUpdate
		(
			sds.SqlConnection connˡ, 
			int? LeaseAdministrationID, 
			int? StaffID, 
			string DeedOfConsentRequiredIndicator, 
			int? FranchiseID, 
			int? PaymentTypeID, 
			string SendDocumentsTo, 
			string TenantRenewingIndicator, 
			string TenantRelocatingIndicator, 
			string RelocationClauseRequiredIndicator, 
			string BankOrFinInstitIndicator, 
			string BankOrFinInstitSpecialConvenantsRequiredIndicator, 
			string SpecialPrecinctConvenants, 
			string UpdateUserCode, 
			DateTime? UpdateDateTime, 
			ref byte[] RowTimestamp, 
			sds.SqlTransaction tranˡ = null
		)
		{
			const string schemaˡ = "dbo" ; 
			const string spˡ = "LeaseAdministrationUpdate" ; 
			 
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>() ;
			sds.SqlParameter paramˡLeaseAdministrationID = base.AddParameterˡ( parametersˡ, "@LeaseAdministrationID", LeaseAdministrationID, sd.SqlDbType.Int, true, null, 10, 0 ) ; 
			sds.SqlParameter paramˡStaffID = base.AddParameterˡ( parametersˡ, "@StaffID", StaffID, sd.SqlDbType.Int, true, null, 10, 0 ) ; 
			sds.SqlParameter paramˡDeedOfConsentRequiredIndicator = base.AddParameterˡ( parametersˡ, "@DeedOfConsentRequiredIndicator", DeedOfConsentRequiredIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡFranchiseID = base.AddParameterˡ( parametersˡ, "@FranchiseID", FranchiseID, sd.SqlDbType.Int, true, null, 10, 0 ) ; 
			sds.SqlParameter paramˡPaymentTypeID = base.AddParameterˡ( parametersˡ, "@PaymentTypeID", PaymentTypeID, sd.SqlDbType.Int, true, null, 10, 0 ) ; 
			sds.SqlParameter paramˡSendDocumentsTo = base.AddParameterˡ( parametersˡ, "@SendDocumentsTo", SendDocumentsTo, sd.SqlDbType.NVarChar, true, 50, null, null ) ; 
			sds.SqlParameter paramˡTenantRenewingIndicator = base.AddParameterˡ( parametersˡ, "@TenantRenewingIndicator", TenantRenewingIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡTenantRelocatingIndicator = base.AddParameterˡ( parametersˡ, "@TenantRelocatingIndicator", TenantRelocatingIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡRelocationClauseRequiredIndicator = base.AddParameterˡ( parametersˡ, "@RelocationClauseRequiredIndicator", RelocationClauseRequiredIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡBankOrFinInstitIndicator = base.AddParameterˡ( parametersˡ, "@BankOrFinInstitIndicator", BankOrFinInstitIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡBankOrFinInstitSpecialConvenantsRequiredIndicator = base.AddParameterˡ( parametersˡ, "@BankOrFinInstitSpecialConvenantsRequiredIndicator", BankOrFinInstitSpecialConvenantsRequiredIndicator, sd.SqlDbType.Char, true, 1, null, null ) ; 
			sds.SqlParameter paramˡSpecialPrecinctConvenants = base.AddParameterˡ( parametersˡ, "@SpecialPrecinctConvenants", SpecialPrecinctConvenants, sd.SqlDbType.NVarChar, true, 800, null, null ) ; 
			sds.SqlParameter paramˡUpdateUserCode = base.AddParameterˡ( parametersˡ, "@UpdateUserCode", UpdateUserCode, sd.SqlDbType.VarChar, true, 50, null, null ) ; 
			sds.SqlParameter paramˡUpdateDateTime = base.AddParameterˡ( parametersˡ, "@UpdateDateTime", UpdateDateTime, sd.SqlDbType.DateTime, true, null, null, null ) ; 
			sds.SqlParameter paramˡRowTimestamp = base.AddParameterˡ( parametersˡ, "@RowTimestamp", RowTimestamp, sd.SqlDbType.Timestamp, false, null, null, null ) ; 
			sds.SqlParameter paramˡrcˡ = base.AddParameterReturnValueˡ( parametersˡ, "@rcˡ" ) ; 
			 
			sd.DataSet dsˡ = base.Executeˡ( connˡ, tranˡ, schemaˡ, spˡ, parametersˡ ) ;
			 
			RowTimestamp = base.GetParameterValueˡ<byte[]>( paramˡRowTimestamp ) ;
			return base.GetParameterValueˡ<int>( paramˡrcˡ ) ;
		}
	}

}

