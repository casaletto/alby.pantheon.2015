
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.pantheon.codegen;

namespace alby.pantheon.codegen.table
{
	public partial class FitoutDetailFactory : acr.FactoryBase< FitoutDetail, ns.database.pantheonDatabaseSingletonHelper, ns.database.pantheonDatabase >
	{
		static FitoutDetailFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "FitoutDetail" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [FitoutDetailID], [FitoutContribution], [FitoutPeriod], [IncentiveBudget], [HandoverDate], [ArchitectFeesPayableIndicator], [ArchitectFees], [EngineerFeesPayableIndicator], [EngineerFees], [SmallShopDesignerFeesPayableIndicator], [SmallShopDesignerFees], [SurveyFeePayableIndicator], [SurveyFees], [TenantCoordinationFeesPayable], [TenantCoordinationFees], [AgreementToLeaseIndicator], [DevelopmentApprovalsRequiredIndicator], [DevelopmentApprovalsDueDate], [ConceptPlanSubmitDate], [FullWorkingDrawingsSubmitDate], [PracticalCompletionDateLessor], [EstimatedOpeningDate], [RefurbishmentRequiredIndicator], [FitoutPlanSubmitDate], [PracticalCompletionDateLessee], [DevelopmentDesignFormSubmitDate], [LessorWorksCost], [UpdateUserCode], [UpdateDateTime], [SmallShopDesignerLessorFee], [SmallShopDesignerBillingDate] ) values ( @FitoutDetailID, @FitoutContribution, @FitoutPeriod, @IncentiveBudget, @HandoverDate, @ArchitectFeesPayableIndicator, @ArchitectFees, @EngineerFeesPayableIndicator, @EngineerFees, @SmallShopDesignerFeesPayableIndicator, @SmallShopDesignerFees, @SurveyFeePayableIndicator, @SurveyFees, @TenantCoordinationFeesPayable, @TenantCoordinationFees, @AgreementToLeaseIndicator, @DevelopmentApprovalsRequiredIndicator, @DevelopmentApprovalsDueDate, @ConceptPlanSubmitDate, @FullWorkingDrawingsSubmitDate, @PracticalCompletionDateLessor, @EstimatedOpeningDate, @RefurbishmentRequiredIndicator, @FitoutPlanSubmitDate, @PracticalCompletionDateLessee, @DevelopmentDesignFormSubmitDate, @LessorWorksCost, @UpdateUserCode, @UpdateDateTime, @SmallShopDesignerLessorFee, @SmallShopDesignerBillingDate ) " ;
			_insertIdentityˡ = "insert {0} ( [FitoutDetailID], [FitoutContribution], [FitoutPeriod], [IncentiveBudget], [HandoverDate], [ArchitectFeesPayableIndicator], [ArchitectFees], [EngineerFeesPayableIndicator], [EngineerFees], [SmallShopDesignerFeesPayableIndicator], [SmallShopDesignerFees], [SurveyFeePayableIndicator], [SurveyFees], [TenantCoordinationFeesPayable], [TenantCoordinationFees], [AgreementToLeaseIndicator], [DevelopmentApprovalsRequiredIndicator], [DevelopmentApprovalsDueDate], [ConceptPlanSubmitDate], [FullWorkingDrawingsSubmitDate], [PracticalCompletionDateLessor], [EstimatedOpeningDate], [RefurbishmentRequiredIndicator], [FitoutPlanSubmitDate], [PracticalCompletionDateLessee], [DevelopmentDesignFormSubmitDate], [LessorWorksCost], [UpdateUserCode], [UpdateDateTime], [SmallShopDesignerLessorFee], [SmallShopDesignerBillingDate] ) values ( @FitoutDetailID, @FitoutContribution, @FitoutPeriod, @IncentiveBudget, @HandoverDate, @ArchitectFeesPayableIndicator, @ArchitectFees, @EngineerFeesPayableIndicator, @EngineerFees, @SmallShopDesignerFeesPayableIndicator, @SmallShopDesignerFees, @SurveyFeePayableIndicator, @SurveyFees, @TenantCoordinationFeesPayable, @TenantCoordinationFees, @AgreementToLeaseIndicator, @DevelopmentApprovalsRequiredIndicator, @DevelopmentApprovalsDueDate, @ConceptPlanSubmitDate, @FullWorkingDrawingsSubmitDate, @PracticalCompletionDateLessor, @EstimatedOpeningDate, @RefurbishmentRequiredIndicator, @FitoutPlanSubmitDate, @PracticalCompletionDateLessee, @DevelopmentDesignFormSubmitDate, @LessorWorksCost, @UpdateUserCode, @UpdateDateTime, @SmallShopDesignerLessorFee, @SmallShopDesignerBillingDate ) " ;
			_updateˡ = "update {0} set [FitoutDetailID] = @FitoutDetailID, [FitoutContribution] = @FitoutContribution, [FitoutPeriod] = @FitoutPeriod, [IncentiveBudget] = @IncentiveBudget, [HandoverDate] = @HandoverDate, [ArchitectFeesPayableIndicator] = @ArchitectFeesPayableIndicator, [ArchitectFees] = @ArchitectFees, [EngineerFeesPayableIndicator] = @EngineerFeesPayableIndicator, [EngineerFees] = @EngineerFees, [SmallShopDesignerFeesPayableIndicator] = @SmallShopDesignerFeesPayableIndicator, [SmallShopDesignerFees] = @SmallShopDesignerFees, [SurveyFeePayableIndicator] = @SurveyFeePayableIndicator, [SurveyFees] = @SurveyFees, [TenantCoordinationFeesPayable] = @TenantCoordinationFeesPayable, [TenantCoordinationFees] = @TenantCoordinationFees, [AgreementToLeaseIndicator] = @AgreementToLeaseIndicator, [DevelopmentApprovalsRequiredIndicator] = @DevelopmentApprovalsRequiredIndicator, [DevelopmentApprovalsDueDate] = @DevelopmentApprovalsDueDate, [ConceptPlanSubmitDate] = @ConceptPlanSubmitDate, [FullWorkingDrawingsSubmitDate] = @FullWorkingDrawingsSubmitDate, [PracticalCompletionDateLessor] = @PracticalCompletionDateLessor, [EstimatedOpeningDate] = @EstimatedOpeningDate, [RefurbishmentRequiredIndicator] = @RefurbishmentRequiredIndicator, [FitoutPlanSubmitDate] = @FitoutPlanSubmitDate, [PracticalCompletionDateLessee] = @PracticalCompletionDateLessee, [DevelopmentDesignFormSubmitDate] = @DevelopmentDesignFormSubmitDate, [LessorWorksCost] = @LessorWorksCost, [UpdateUserCode] = @UpdateUserCode, [UpdateDateTime] = @UpdateDateTime, [SmallShopDesignerLessorFee] = @SmallShopDesignerLessorFee, [SmallShopDesignerBillingDate] = @SmallShopDesignerBillingDate " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [FitoutDetailID] = @pk_FitoutDetailID " ;
			_whereSavePKˡ = "where [FitoutDetailID] = @pk_FitoutDetailID " ;
		}

		public FitoutDetail Saveˡ( sds.SqlConnection connˡ, FitoutDetail rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_FitoutDetailID", rowˡ.PrimaryKeyDictionaryˡ[ FitoutDetail.column٠FitoutDetailID ] );
			base.AddParameterˡ( parametersˡ, "@FitoutDetailID", rowˡ.FitoutDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@FitoutContribution", rowˡ.FitoutContribution, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@FitoutPeriod", rowˡ.FitoutPeriod, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@IncentiveBudget", rowˡ.IncentiveBudget, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@HandoverDate", rowˡ.HandoverDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ArchitectFeesPayableIndicator", rowˡ.ArchitectFeesPayableIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ArchitectFees", rowˡ.ArchitectFees, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@EngineerFeesPayableIndicator", rowˡ.EngineerFeesPayableIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@EngineerFees", rowˡ.EngineerFees, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@SmallShopDesignerFeesPayableIndicator", rowˡ.SmallShopDesignerFeesPayableIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@SmallShopDesignerFees", rowˡ.SmallShopDesignerFees, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@SurveyFeePayableIndicator", rowˡ.SurveyFeePayableIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@SurveyFees", rowˡ.SurveyFees, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@TenantCoordinationFeesPayable", rowˡ.TenantCoordinationFeesPayable, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@TenantCoordinationFees", rowˡ.TenantCoordinationFees, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@AgreementToLeaseIndicator", rowˡ.AgreementToLeaseIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DevelopmentApprovalsRequiredIndicator", rowˡ.DevelopmentApprovalsRequiredIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DevelopmentApprovalsDueDate", rowˡ.DevelopmentApprovalsDueDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ConceptPlanSubmitDate", rowˡ.ConceptPlanSubmitDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@FullWorkingDrawingsSubmitDate", rowˡ.FullWorkingDrawingsSubmitDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PracticalCompletionDateLessor", rowˡ.PracticalCompletionDateLessor, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@EstimatedOpeningDate", rowˡ.EstimatedOpeningDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@RefurbishmentRequiredIndicator", rowˡ.RefurbishmentRequiredIndicator, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@FitoutPlanSubmitDate", rowˡ.FitoutPlanSubmitDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PracticalCompletionDateLessee", rowˡ.PracticalCompletionDateLessee, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DevelopmentDesignFormSubmitDate", rowˡ.DevelopmentDesignFormSubmitDate, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@LessorWorksCost", rowˡ.LessorWorksCost, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@UpdateUserCode", rowˡ.UpdateUserCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@UpdateDateTime", rowˡ.UpdateDateTime, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@RowTimestamp", rowˡ.RowTimestamp, sd.SqlDbType.Image );
			base.AddParameterˡ( parametersˡ, "@SmallShopDesignerLessorFee", rowˡ.SmallShopDesignerLessorFee, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@SmallShopDesignerBillingDate", rowˡ.SmallShopDesignerBillingDate, sd.SqlDbType.DateTime );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.FitoutDetailID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.FitoutDetailID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<FitoutDetail> Saveˡ( sds.SqlConnection connˡ, scg.List<FitoutDetail> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<FitoutDetail> rowList2ˡ = new scg.List<FitoutDetail>();
			foreach( FitoutDetail rowˡ in rowListˡ )
			{
				FitoutDetail row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public FitoutDetail LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			int? FitoutDetailID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_FitoutDetailID", FitoutDetailID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<FitoutDetail> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<FitoutDetail> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

