
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.pantheon.codegen;

namespace alby.pantheon.codegen.table
{
	public partial class LeaseFactory : acr.FactoryBase< Lease, ns.database.pantheonDatabaseSingletonHelper, ns.database.pantheonDatabase >
	{
		static LeaseFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "Lease" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [LeaseID], [LeaseStatus], [PIMSUsageCode], [LeaseTypeID], [CostCentreStageID], [StageNumber], [ShopNo], [Level], [Area], [AreaType], [PrecinctID], [SectorID], [ShopTypeID], [LeaseExecutiveID], [LeaseGuarantorID], [LesseeID], [SolicitorID], [CommenceDate], [ExpiryDate], [LeaseTermYears], [LeaseTermMonths], [LeaseTermDays], [LeaseTermText], [LOIIssueDate], [LOIDueDate], [CompanyName], [ACN], [ABN], [LesseeName], [TradingName], [ChainID], [SalesCategoryID], [PermittedUse], [ExpenseDetailID], [FitoutDetailID], [LeaseAdministrationID], [LeaseCommentID], [LeaseConditionID], [RentDetailID], [SurrenderDetailID], [VacantPossessionDetailID], [UpdateUserCode], [UpdateDateTime] ) values ( @LeaseID, @LeaseStatus, @PIMSUsageCode, @LeaseTypeID, @CostCentreStageID, @StageNumber, @ShopNo, @Level, @Area, @AreaType, @PrecinctID, @SectorID, @ShopTypeID, @LeaseExecutiveID, @LeaseGuarantorID, @LesseeID, @SolicitorID, @CommenceDate, @ExpiryDate, @LeaseTermYears, @LeaseTermMonths, @LeaseTermDays, @LeaseTermText, @LOIIssueDate, @LOIDueDate, @CompanyName, @ACN, @ABN, @LesseeName, @TradingName, @ChainID, @SalesCategoryID, @PermittedUse, @ExpenseDetailID, @FitoutDetailID, @LeaseAdministrationID, @LeaseCommentID, @LeaseConditionID, @RentDetailID, @SurrenderDetailID, @VacantPossessionDetailID, @UpdateUserCode, @UpdateDateTime ) " ;
			_insertIdentityˡ = "insert {0} ( [LeaseID], [LeaseStatus], [PIMSUsageCode], [LeaseTypeID], [CostCentreStageID], [StageNumber], [ShopNo], [Level], [Area], [AreaType], [PrecinctID], [SectorID], [ShopTypeID], [LeaseExecutiveID], [LeaseGuarantorID], [LesseeID], [SolicitorID], [CommenceDate], [ExpiryDate], [LeaseTermYears], [LeaseTermMonths], [LeaseTermDays], [LeaseTermText], [LOIIssueDate], [LOIDueDate], [CompanyName], [ACN], [ABN], [LesseeName], [TradingName], [ChainID], [SalesCategoryID], [PermittedUse], [ExpenseDetailID], [FitoutDetailID], [LeaseAdministrationID], [LeaseCommentID], [LeaseConditionID], [RentDetailID], [SurrenderDetailID], [VacantPossessionDetailID], [UpdateUserCode], [UpdateDateTime] ) values ( @LeaseID, @LeaseStatus, @PIMSUsageCode, @LeaseTypeID, @CostCentreStageID, @StageNumber, @ShopNo, @Level, @Area, @AreaType, @PrecinctID, @SectorID, @ShopTypeID, @LeaseExecutiveID, @LeaseGuarantorID, @LesseeID, @SolicitorID, @CommenceDate, @ExpiryDate, @LeaseTermYears, @LeaseTermMonths, @LeaseTermDays, @LeaseTermText, @LOIIssueDate, @LOIDueDate, @CompanyName, @ACN, @ABN, @LesseeName, @TradingName, @ChainID, @SalesCategoryID, @PermittedUse, @ExpenseDetailID, @FitoutDetailID, @LeaseAdministrationID, @LeaseCommentID, @LeaseConditionID, @RentDetailID, @SurrenderDetailID, @VacantPossessionDetailID, @UpdateUserCode, @UpdateDateTime ) " ;
			_updateˡ = "update {0} set [LeaseID] = @LeaseID, [LeaseStatus] = @LeaseStatus, [PIMSUsageCode] = @PIMSUsageCode, [LeaseTypeID] = @LeaseTypeID, [CostCentreStageID] = @CostCentreStageID, [StageNumber] = @StageNumber, [ShopNo] = @ShopNo, [Level] = @Level, [Area] = @Area, [AreaType] = @AreaType, [PrecinctID] = @PrecinctID, [SectorID] = @SectorID, [ShopTypeID] = @ShopTypeID, [LeaseExecutiveID] = @LeaseExecutiveID, [LeaseGuarantorID] = @LeaseGuarantorID, [LesseeID] = @LesseeID, [SolicitorID] = @SolicitorID, [CommenceDate] = @CommenceDate, [ExpiryDate] = @ExpiryDate, [LeaseTermYears] = @LeaseTermYears, [LeaseTermMonths] = @LeaseTermMonths, [LeaseTermDays] = @LeaseTermDays, [LeaseTermText] = @LeaseTermText, [LOIIssueDate] = @LOIIssueDate, [LOIDueDate] = @LOIDueDate, [CompanyName] = @CompanyName, [ACN] = @ACN, [ABN] = @ABN, [LesseeName] = @LesseeName, [TradingName] = @TradingName, [ChainID] = @ChainID, [SalesCategoryID] = @SalesCategoryID, [PermittedUse] = @PermittedUse, [ExpenseDetailID] = @ExpenseDetailID, [FitoutDetailID] = @FitoutDetailID, [LeaseAdministrationID] = @LeaseAdministrationID, [LeaseCommentID] = @LeaseCommentID, [LeaseConditionID] = @LeaseConditionID, [RentDetailID] = @RentDetailID, [SurrenderDetailID] = @SurrenderDetailID, [VacantPossessionDetailID] = @VacantPossessionDetailID, [UpdateUserCode] = @UpdateUserCode, [UpdateDateTime] = @UpdateDateTime " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [LeaseID] = @pk_LeaseID " ;
			_whereSavePKˡ = "where [LeaseID] = @pk_LeaseID " ;
		}

		public Lease Saveˡ( sds.SqlConnection connˡ, Lease rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_LeaseID", rowˡ.PrimaryKeyDictionaryˡ[ Lease.column٠LeaseID ] );
			base.AddParameterˡ( parametersˡ, "@LeaseID", rowˡ.LeaseID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseStatus", rowˡ.LeaseStatus, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PIMSUsageCode", rowˡ.PIMSUsageCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@LeaseTypeID", rowˡ.LeaseTypeID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@CostCentreStageID", rowˡ.CostCentreStageID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@StageNumber", rowˡ.StageNumber, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ShopNo", rowˡ.ShopNo, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Level", rowˡ.Level, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@Area", rowˡ.Area, sd.SqlDbType.Decimal );
			base.AddParameterˡ( parametersˡ, "@AreaType", rowˡ.AreaType, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@PrecinctID", rowˡ.PrecinctID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@SectorID", rowˡ.SectorID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@ShopTypeID", rowˡ.ShopTypeID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseExecutiveID", rowˡ.LeaseExecutiveID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseGuarantorID", rowˡ.LeaseGuarantorID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LesseeID", rowˡ.LesseeID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@SolicitorID", rowˡ.SolicitorID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@CommenceDate", rowˡ.CommenceDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@ExpiryDate", rowˡ.ExpiryDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@LeaseTermYears", rowˡ.LeaseTermYears, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseTermMonths", rowˡ.LeaseTermMonths, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseTermDays", rowˡ.LeaseTermDays, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseTermText", rowˡ.LeaseTermText, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@LOIIssueDate", rowˡ.LOIIssueDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@LOIDueDate", rowˡ.LOIDueDate, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@CompanyName", rowˡ.CompanyName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ACN", rowˡ.ACN, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ABN", rowˡ.ABN, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@LesseeName", rowˡ.LesseeName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@TradingName", rowˡ.TradingName, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ChainID", rowˡ.ChainID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@SalesCategoryID", rowˡ.SalesCategoryID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@PermittedUse", rowˡ.PermittedUse, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ExpenseDetailID", rowˡ.ExpenseDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@FitoutDetailID", rowˡ.FitoutDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseAdministrationID", rowˡ.LeaseAdministrationID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseCommentID", rowˡ.LeaseCommentID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@LeaseConditionID", rowˡ.LeaseConditionID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@RentDetailID", rowˡ.RentDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@SurrenderDetailID", rowˡ.SurrenderDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@VacantPossessionDetailID", rowˡ.VacantPossessionDetailID, sd.SqlDbType.Int );
			base.AddParameterˡ( parametersˡ, "@UpdateUserCode", rowˡ.UpdateUserCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@UpdateDateTime", rowˡ.UpdateDateTime, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@RowTimestamp", rowˡ.RowTimestamp, sd.SqlDbType.Image );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.LeaseID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.LeaseID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<Lease> Saveˡ( sds.SqlConnection connˡ, scg.List<Lease> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<Lease> rowList2ˡ = new scg.List<Lease>();
			foreach( Lease rowˡ in rowListˡ )
			{
				Lease row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public Lease LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			int? LeaseID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_LeaseID", LeaseID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠Chain٠By٠ChainID
		(
			sds.SqlConnection connˡ,
			int? ChainID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@ChainID", ChainID );
			string whereˡ = "where [ChainID] = @ChainID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠CostCentreStage٠By٠CostCentreStageID
		(
			sds.SqlConnection connˡ,
			int? CostCentreStageID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@CostCentreStageID", CostCentreStageID );
			string whereˡ = "where [CostCentreStageID] = @CostCentreStageID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠ExpenseDetail٠By٠ExpenseDetailID
		(
			sds.SqlConnection connˡ,
			int? ExpenseDetailID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@ExpenseDetailID", ExpenseDetailID );
			string whereˡ = "where [ExpenseDetailID] = @ExpenseDetailID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠FitoutDetail٠By٠FitoutDetailID
		(
			sds.SqlConnection connˡ,
			int? FitoutDetailID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@FitoutDetailID", FitoutDetailID );
			string whereˡ = "where [FitoutDetailID] = @FitoutDetailID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠LeaseAdministration٠By٠LeaseAdministrationID
		(
			sds.SqlConnection connˡ,
			int? LeaseAdministrationID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LeaseAdministrationID", LeaseAdministrationID );
			string whereˡ = "where [LeaseAdministrationID] = @LeaseAdministrationID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠LeaseComment٠By٠LeaseCommentID
		(
			sds.SqlConnection connˡ,
			int? LeaseCommentID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LeaseCommentID", LeaseCommentID );
			string whereˡ = "where [LeaseCommentID] = @LeaseCommentID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠LeaseCondition٠By٠LeaseConditionID
		(
			sds.SqlConnection connˡ,
			int? LeaseConditionID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LeaseConditionID", LeaseConditionID );
			string whereˡ = "where [LeaseConditionID] = @LeaseConditionID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠LeaseExecutive٠By٠LeaseExecutiveID
		(
			sds.SqlConnection connˡ,
			int? LeaseExecutiveID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LeaseExecutiveID", LeaseExecutiveID );
			string whereˡ = "where [LeaseExecutiveID] = @LeaseExecutiveID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠LeaseType٠By٠LeaseTypeID
		(
			sds.SqlConnection connˡ,
			int? LeaseTypeID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LeaseTypeID", LeaseTypeID );
			string whereˡ = "where [LeaseTypeID] = @LeaseTypeID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠Lessee٠By٠LesseeID
		(
			sds.SqlConnection connˡ,
			int? LesseeID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@LesseeID", LesseeID );
			string whereˡ = "where [LesseeID] = @LesseeID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠Precinct٠By٠PrecinctID
		(
			sds.SqlConnection connˡ,
			int? PrecinctID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@PrecinctID", PrecinctID );
			string whereˡ = "where [PrecinctID] = @PrecinctID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠RentDetail٠By٠RentDetailID
		(
			sds.SqlConnection connˡ,
			int? RentDetailID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@RentDetailID", RentDetailID );
			string whereˡ = "where [RentDetailID] = @RentDetailID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠SalesCategory٠By٠SalesCategoryID
		(
			sds.SqlConnection connˡ,
			int? SalesCategoryID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@SalesCategoryID", SalesCategoryID );
			string whereˡ = "where [SalesCategoryID] = @SalesCategoryID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠Sector٠By٠SectorID
		(
			sds.SqlConnection connˡ,
			int? SectorID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@SectorID", SectorID );
			string whereˡ = "where [SectorID] = @SectorID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠ShopType٠By٠ShopTypeID
		(
			sds.SqlConnection connˡ,
			int? ShopTypeID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@ShopTypeID", ShopTypeID );
			string whereˡ = "where [ShopTypeID] = @ShopTypeID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠Solicitor٠By٠SolicitorID
		(
			sds.SqlConnection connˡ,
			int? SolicitorID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@SolicitorID", SolicitorID );
			string whereˡ = "where [SolicitorID] = @SolicitorID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠SurrenderDetail٠By٠SurrenderDetailID
		(
			sds.SqlConnection connˡ,
			int? SurrenderDetailID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@SurrenderDetailID", SurrenderDetailID );
			string whereˡ = "where [SurrenderDetailID] = @SurrenderDetailID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByForeignKey٠From٠VacantPossessionDetail٠By٠VacantPossessionDetailID
		(
			sds.SqlConnection connˡ,
			int? VacantPossessionDetailID,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@VacantPossessionDetailID", VacantPossessionDetailID );
			string whereˡ = "where [VacantPossessionDetailID] = @VacantPossessionDetailID " ; 
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<Lease> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

