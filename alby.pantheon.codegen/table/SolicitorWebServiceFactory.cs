
// This file was automatically generated by the code gen tool - do not modify.

using System ;
using scg = System.Collections.Generic ;
using sd = System.Data ;
using sds = System.Data.SqlClient ;
using sr = System.Reflection ;
using mst = Microsoft.SqlServer.Types ;
using mss = Microsoft.SqlServer.Server ;
using acr = alby.codegen.runtime ;
using ns = alby.pantheon.codegen;

namespace alby.pantheon.codegen.table
{
	public partial class SolicitorWebServiceFactory : acr.FactoryBase< SolicitorWebService, ns.database.pantheonDatabaseSingletonHelper, ns.database.pantheonDatabase >
	{
		static SolicitorWebServiceFactory() 
		{
			_assemblyˡ = sr.Assembly.GetExecutingAssembly() ;
			_schemaˡ = "dbo" ;
			_tableˡ = "SolicitorWebService" ;
			_selectˡ = "select * from {0} t " ;
			_insertˡ = "insert {0} ( [SolicitorWebServiceGUID], [Name], [DevUrl], [IntgUrl], [TestUrl], [StagUrl], [ProdUrl], [DRUrl], [DevCertFilename], [IntgCertFilename], [TestCertFilename], [StagCertFilename], [ProdCertFilename], [DRCertFilename], [UpdateUserCode], [UpdateDateTime] ) values ( @SolicitorWebServiceGUID, @Name, @DevUrl, @IntgUrl, @TestUrl, @StagUrl, @ProdUrl, @DRUrl, @DevCertFilename, @IntgCertFilename, @TestCertFilename, @StagCertFilename, @ProdCertFilename, @DRCertFilename, @UpdateUserCode, @UpdateDateTime ) " ;
			_insertIdentityˡ = "insert {0} ( [SolicitorWebServiceGUID], [Name], [DevUrl], [IntgUrl], [TestUrl], [StagUrl], [ProdUrl], [DRUrl], [DevCertFilename], [IntgCertFilename], [TestCertFilename], [StagCertFilename], [ProdCertFilename], [DRCertFilename], [UpdateUserCode], [UpdateDateTime] ) values ( @SolicitorWebServiceGUID, @Name, @DevUrl, @IntgUrl, @TestUrl, @StagUrl, @ProdUrl, @DRUrl, @DevCertFilename, @IntgCertFilename, @TestCertFilename, @StagCertFilename, @ProdCertFilename, @DRCertFilename, @UpdateUserCode, @UpdateDateTime ) " ;
			_updateˡ = "update {0} set [SolicitorWebServiceGUID] = @SolicitorWebServiceGUID, [Name] = @Name, [DevUrl] = @DevUrl, [IntgUrl] = @IntgUrl, [TestUrl] = @TestUrl, [StagUrl] = @StagUrl, [ProdUrl] = @ProdUrl, [DRUrl] = @DRUrl, [DevCertFilename] = @DevCertFilename, [IntgCertFilename] = @IntgCertFilename, [TestCertFilename] = @TestCertFilename, [StagCertFilename] = @StagCertFilename, [ProdCertFilename] = @ProdCertFilename, [DRCertFilename] = @DRCertFilename, [UpdateUserCode] = @UpdateUserCode, [UpdateDateTime] = @UpdateDateTime " ;
			_deleteˡ = "delete {0} " ;
			_whereLoadPKˡ = "where [SolicitorWebServiceGUID] = @pk_SolicitorWebServiceGUID " ;
			_whereSavePKˡ = "where [SolicitorWebServiceGUID] = @pk_SolicitorWebServiceGUID " ;
		}

		public SolicitorWebService Saveˡ( sds.SqlConnection connˡ, SolicitorWebService rowˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal, bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_SolicitorWebServiceGUID", rowˡ.PrimaryKeyDictionaryˡ[ SolicitorWebService.column٠SolicitorWebServiceGUID ] );
			base.AddParameterˡ( parametersˡ, "@SolicitorWebServiceGUID", rowˡ.SolicitorWebServiceGUID, sd.SqlDbType.UniqueIdentifier );
			base.AddParameterˡ( parametersˡ, "@Name", rowˡ.Name, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DevUrl", rowˡ.DevUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@IntgUrl", rowˡ.IntgUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@TestUrl", rowˡ.TestUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@StagUrl", rowˡ.StagUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ProdUrl", rowˡ.ProdUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DRUrl", rowˡ.DRUrl, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DevCertFilename", rowˡ.DevCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@IntgCertFilename", rowˡ.IntgCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@TestCertFilename", rowˡ.TestCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@StagCertFilename", rowˡ.StagCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@ProdCertFilename", rowˡ.ProdCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@DRCertFilename", rowˡ.DRCertFilename, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@UpdateUserCode", rowˡ.UpdateUserCode, sd.SqlDbType.NText );
			base.AddParameterˡ( parametersˡ, "@UpdateDateTime", rowˡ.UpdateDateTime, sd.SqlDbType.DateTime );
			base.AddParameterˡ( parametersˡ, "@RowTimestamp", rowˡ.RowTimestamp, sd.SqlDbType.Image );

			int? identityIDˡ = null ;
			object objˡ = null ;
		 
			acr.SaveEnum saveResultˡ ;
		 
			if ( saveStrategyˡ != acr.CodeGenSaveStrategy.Normal )
			{
				saveResultˡ = base.ExecuteForceSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, saveStrategyˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereLoadPKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
			else
			{
				saveResultˡ = base.ExecuteSaveˡ( rowˡ, connˡ, tranˡ, parametersˡ, _insertˡ, _insertIdentityˡ, _updateˡ, _deleteˡ, _whereSavePKˡ, false, identityProvidedˡ, out objˡ ) ;
				if ( objˡ != null )
					identityIDˡ = int.Parse( objˡ.ToString() ) ;
			}
		 
			if ( saveResultˡ == acr.SaveEnum.Update ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.SolicitorWebServiceGUID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Insert ) 
				return this.LoadByPrimaryKeyˡ( connˡ, rowˡ.SolicitorWebServiceGUID, tranˡ ) ;
			else
			if ( saveResultˡ == acr.SaveEnum.Delete )
				return null ;
			else
				return rowˡ ;
		}

		public scg.List<SolicitorWebService> Saveˡ( sds.SqlConnection connˡ, scg.List<SolicitorWebService> rowListˡ, acr.CodeGenSaveStrategy saveStrategyˡ = acr.CodeGenSaveStrategy.Normal,  bool identityProvidedˡ = false, sds.SqlTransaction tranˡ = null )
		{
			scg.List<SolicitorWebService> rowList2ˡ = new scg.List<SolicitorWebService>();
			foreach( SolicitorWebService rowˡ in rowListˡ )
			{
				SolicitorWebService row2ˡ = this.Saveˡ( connˡ, rowˡ, saveStrategyˡ, identityProvidedˡ, tranˡ ) ;
				if ( row2ˡ != null )	rowList2ˡ.Add( row2ˡ ) ;
			}
			return rowList2ˡ ;
		}

		public SolicitorWebService LoadByPrimaryKeyˡ
		(
			sds.SqlConnection connˡ,
			Guid? SolicitorWebServiceGUID,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			base.AddParameterˡ( parametersˡ, "@pk_SolicitorWebServiceGUID", SolicitorWebServiceGUID );
			return base.ExecuteQueryReturnOneˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, _whereLoadPKˡ, false ) ;
		}

		public scg.List<SolicitorWebService> Loadˡ
		(
			sds.SqlConnection connˡ,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			scg.List<sds.SqlParameter> parametersˡ = new scg.List<sds.SqlParameter>();
			string whereˡ = "";
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

		public scg.List<SolicitorWebService> LoadByWhereˡ
		(
			sds.SqlConnection connˡ,
			string whereˡ,
			scg.List<sds.SqlParameter> parametersˡ = null,
			int? topNˡ = null,
			scg.List<acr.CodeGenOrderBy> orderByˡ = null,
			sds.SqlTransaction tranˡ = null
		)
		{
			string sqlˡ = "" ; 
			return base.ExecuteQueryˡ( connˡ, tranˡ, parametersˡ, _assemblyˡ, _selectˡ, false, whereˡ, false, topNˡ, orderByˡ, out sqlˡ ) ;
		}

	}

}

